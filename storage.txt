General Dev Notes: 

Folder Struct and what each piece does: 

lumascan/
├── frontend/                  # Next.js + Tailwind CSS app
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/            # Next.js routes
│   │   ├── styles/
│   │   ├── lib/              # supabase client, utils
│   │   └── hooks/
│   ├── .env.local.example
│   ├── tailwind.config.js
│   ├── postcss.config.js
│   ├── next.config.js
│   └── package.json
│
├── backend/                  # Flask REST API
│   ├── app/
│   │   ├── __init__.py       # Create Flask app here
│   │   ├── routes/
│   │   │   ├── auth.py
│   │   │   ├── upload.py
│   │   │   └── scan.py
│   │   ├── services/         # PDF parsing, AI, similarity
│   │   │   ├── parser.py
│   │   │   ├── embeddings.py
│   │   │   └── match.py
│   │   ├── utils/
│   │   │   └── jwt.py        # Supabase JWT verification
│   │   └── config.py
│   ├── requirements.txt
│   ├── .env.example
│   └── run.py
│
├── .gitignore
├── README.md
├── LICENSE
└── .github/
    └── ISSUE_TEMPLATE/
        └── feature_request.md


Able to find match rate every single time and it will be exact
able to seek out missing skills
able to state misc or extra skills
will create new resume with job desc 
will create CV as well

UPLOAD_RESPONSE=$(curl -s -X POST http://localhost:5000/upload \
  -F "resume=@Sample_Resume.pdf" \
  -H "Content-Type: multipart/form-data")

echo "$UPLOAD_RESPONSE" | jq .

curl -X POST http://localhost:5000/match \
  -H "Content-Type: application/json" \
  -d "$(jq -n --arg text "$(echo "$UPLOAD_RESPONSE" | jq -r '.resume_text')" '{
    "resume_text": $text,
    "job_desc": "Machine Learning Engineer position requiring Python, TensorFlow, and data processing experience. Strong math background preferred.",
    "industry": "tech"
  }')"


1. First Upload the Resume:
UPLOAD_RESPONSE=$(curl -s -X POST http://localhost:5000/upload \
  -F "resume=@Sample_Resume.pdf" \
  -H "Content-Type: multipart/form-data")

# Verify upload succeeded
echo "$UPLOAD_RESPONSE" | jq .

2. Test Against Different Job Descriptions:
A) Cloud Engineer Position:
curl -X POST http://localhost:5000/match \
  -H "Content-Type: application/json" \
  -d "$(jq -n --arg text "$(echo "$UPLOAD_RESPONSE" | jq -r '.resume_text')" '{
    "resume_text": $text,
    "job_desc": "Seeking a Cloud Engineer with 2+ years of Python and AWS experience. Must have deployed applications using serverless architectures and containerization. CI/CD pipeline experience required.",
    "industry": "tech"
  }')"

  B) ML Engineer Position:
  curl -X POST http://localhost:5000/match \
  -H "Content-Type: application/json" \
  -d "$(jq -n --arg text "$(echo "$UPLOAD_RESPONSE" | jq -r '.resume_text')" '{
    "resume_text": $text,
    "job_desc": "Machine Learning Engineer needed with TensorFlow/PyTorch experience. Strong Python, data processing (Pandas/NumPy), and model deployment skills required.",
    "industry": "tech"
  }')"

  C) Full-Stack Developer Position:

  curl -X POST http://localhost:5000/match \
  -H "Content-Type: application/json" \
  -d "$(jq -n --arg text "$(echo "$UPLOAD_RESPONSE" | jq -r '.resume_text')" '{
    "resume_text": $text,
    "job_desc": "Full-stack developer proficient in React, Node.js, and cloud deployment. API development experience required.",
    "industry": "tech"
  }')"

  3. Key Things to Verify:
Score Accuracy:

Perfect matches should be ~95-100%

Strong-but-not-perfect ~70-90%

Partial matches ~40-60%

Industry Analysis Quality:

Should highlight your AWS experience when relevant

Should note your Scikit-learn as ML experience

Should recognize your React/Next.js as full-stack skills

Missing Skills:

Should intelligently identify true gaps (e.g., Kubernetes if not mentioned)

Shouldn't flag skills you actually have